Here is a complete implementation of a Python-based logout API using Flask, a micro web framework. This code snippet will handle the logout request, provide a status code of 200 on successful logout, return feedback on failures, and handle exceptions gracefully:

```python
from flask import Flask, jsonify, request

app = Flask(__name__)

# Dummy in-memory store for session tokens for illustration
# In production, use a proper session/token management system like Redis or a Database
session_store = {
    'user123': 'session_token_abc'
}

def verify_logout(token):
    """
    Verify the token during logout to see if it's valid and in our session store.

    :param token: Session token of the user
    :return: Boolean indicating if the logout is successful
    """
    if token in session_store.values():
        return True
    return False

def invalidate_session(token):
    """
    Invalidate the given session token from our store.

    :param token: Session token of the user
    """
    # In a real application, the logic to remove the token from a data store should be written here.
    # Example: session_store.pop(user_id) based on the session mechanism
    for user_id, stored_token in session_store.items():
        if stored_token == token:
            del session_store[user_id]
            break

@app.route('/api/logout', methods=['POST'])
def logout():
    try:
        # Assume token is passed in the request headers
        token = request.headers.get('Authorization')

        if not token:
            return jsonify({'error': 'Token is missing.'}), 400

        if not verify_logout(token):
            return jsonify({'error': 'Invalid session token or already logged out.'}), 403

        # Invalidate the session token
        invalidate_session(token)

        return jsonify({'message': 'Successfully logged out.'}), 200

    except Exception as e:
        # Log the exception and provide a meaningful error message
        app.logger.error(f'Unexpected error during logout: {e}')
        return jsonify({'error': 'An unexpected error occurred. Please try again later.'}), 500

if __name__ == '__main__':
    app.run(debug=True)
```

### Explanation:

- We define a simple Flask application with one endpoint (`/api/logout`) that listens for `POST` requests.
  
- The `verify_logout(token)` function checks if the token is valid. For simplicity, it just checks if the token is present in our dummy `session_store`.

- The `invalidate_session(token)` function removes the token from the `session_store` to simulate the logout process.

- The logout function checks for the presence of an Authorization header which contains the session token. If it does not exist or is invalid, it returns appropriate error messages with HTTP status codes 400 and 403, respectively.

- Upon a successful logout, the function returns a message "Successfully logged out" with a status code 200.

- The `except Exception as e` block catches any unexpected errors, logs them, and provides a meaningful error message to the user with a status code 500.