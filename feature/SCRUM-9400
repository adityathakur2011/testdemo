Below is a complete Python code snippet implementing a login REST API using Flask, a lightweight web application framework. The code includes comments to make each part understandable.

```python
from flask import Flask, request, jsonify
from werkzeug.security import check_password_hash

app = Flask(__name__)

# Mock user data
users = {
    "example_user": {
        "username": "example_user",
        "password": "pbkdf2:sha256:150000$K9YZazfs$fbb6d8b8b92568e376b5a44c2c0eb2f6"  # Hash for "example_password"
    }
}

@app.route('/login', methods=['POST'])
def login():
    # Retrieve username and password from the request JSON body
    data = request.json
    username = data.get('username')
    password = data.get('password')

    if not username or not password:
        # If username or password is missing, return an error
        return jsonify({"error": "Missing username or password"}), 400

    user = users.get(username)

    if not user or not check_password_hash(user['password'], password):
        # If user not found or password does not match, return error
        return jsonify({"error": "Invalid username or password"}), 401

    # On success, return a success message
    return jsonify({"message": "Login successful"}), 200

if __name__ == '__main__':
    app.run(debug=True)
```

### Explanation:
- **Flask**: Flask is used to create the API. It is initialized with the application name and executed in debug mode for development.
- **Mock user data**: A dictionary simulates user data storage, with passwords stored as hashes.
- **Login Route**: A POST endpoint `/login` is created. It extracts the username and password from incoming JSON data.
- **Validation**: It checks if the provided username and password match any entry in the user data. The password is verified using a hash comparison.
- **Responses**: If credentials do not match, it returns `401 Unauthorized`. If the username or password is missing, it returns `400 Bad Request`. On success, it returns a `200 OK` message.

Important: In a real application, user credentials would be securely stored in a database with additional security considerations such as salting, rate limiting, and potentially an authentication token response.