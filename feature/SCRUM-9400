Below is a complete code snippet implementing a login REST API using Python with the Flask framework. The code includes detailed comments to help understand how each part functions. 

```python
from flask import Flask, request, jsonify
from werkzeug.security import check_password_hash

app = Flask(__name__)

# Simulated users database
users = {
    "user1": {"password": "pbkdf2:sha256:150000$K8voku3O$139bba5b3c0..."},
    # Store passwords as hashed strings using werkzeug.security
}

@app.route('/login', methods=['POST'])
def login():
    # Get username and password from the request JSON
    data = request.json

    if not data or not data.get('username') or not data.get('password'):
        # If request does not contain the necessary fields, return a bad request response
        return jsonify({"error": "Missing username or password"}), 400

    username = data['username']
    password = data['password']

    # Check if user exists
    user = users.get(username)
    if not user:
        return jsonify({"error": "Invalid username or password"}), 401

    # Verify password using check_password_hash function
    if not check_password_hash(user['password'], password):
        return jsonify({"error": "Invalid username or password"}), 401

    # If the password is correct, return a success message
    return jsonify({"message": "Login successful"}), 200

if __name__ == '__main__':
    app.run(debug=True)
```

### Explanation:
- **Flask**: A micro web framework for Python used to build web applications quickly.
- **request**: To handle incoming API requests.
- **jsonify**: Utility function to return responses in JSON format.
- **check_password_hash**: Used to safely verify user password against a hashed password stored in the database.
- **users dictionary**: Simulates a users database storing a single user with hashed password. In a production setup, you'd retrieve these details from a real database.
- **login() function**: The core logic for the login API, takes `username` and `password` from the JSON request body, checks their existence, and verifies them against stored credentials.
- **Error responses**: Proper error responses are sent for missing fields or invalid credentials, following HTTP status codes (400 for bad request, 401 for unauthorized).

Note: In a real-world application, make sure to use secure configurations and handle sessions or tokens for authenticated requests.

Make sure Flask and its dependencies are installed, which you can do by running `pip install Flask`. Also, remember to hash passwords using a strong hash function in actual deployment.