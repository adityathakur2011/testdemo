```python
# Let's assume we have a simple Flask application to handle the onboarding portal for clinical trial registration.

from flask import Flask, request, jsonify

app = Flask(__name__)

# In-memory "database" to store patients
patients_db = []

@app.route('/register', methods=['POST'])
def register_patient():
    """
    Endpoint to register a new patient.
    - Expects a JSON body with 'name', 'age', 'email', and 'trial_id'.
    """
    data = request.get_json()

    # Check for required fields
    if not data or 'name' not in data or 'age' not in data or 'email' not in data or 'trial_id' not in data:
        return jsonify({"error": "Missing required field(s)"}), 400

    # Simulate patient ID generation
    patient_id = len(patients_db) + 1

    # Add patient to the database
    new_patient = {
        'id': patient_id,
        'name': data['name'],
        'age': data['age'],
        'email': data['email'],
        'trial_id': data['trial_id'],
    }
    patients_db.append(new_patient)

    return jsonify(new_patient), 201

@app.route('/patients', methods=['GET'])
def get_patients():
    """
    Endpoint to get the list of registered patients.
    """
    return jsonify(patients_db), 200

if __name__ == '__main__':
    app.run(debug=True)
```

# Explanation:
1. **Flask Setup**: We're using Flask to create a web server. Flask is a lightweight WSGI web application framework in Python.
2. **In-Memory Database**: We're using a simple list (`patients_db`) to simulate a database of patients. In a production environment, you'd typically use a persistent database, like SQL or NoSQL databases.
3. **`/register` Endpoint**: This accepts JSON POST requests to register a new patient. The patient must provide their `name`, `age`, `email`, and `trial_id`. A new entry is then added to our in-memory database.
4. **Unique Patient ID**: The patient ID is generated by simply taking the length of the current database and adding one. This is for demonstration purposes; a real application should use a more robust method for ID generation.
5. **Return JSON Response**: Upon successful registration, the patient data along with a unique ID is returned.
6. **`/patients` Endpoint**: This allows fetching all registered patients. This is useful for verifying entries during testing.

This code provides the required functionality with clear routes and endpoints, including error handling for missing fields, and simulates a simple yet comprehensive registration flow for clinical trial onboarding.