```python
from flask import Flask, request, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
import jwt
import datetime

app = Flask(__name__)

# Secret key to encode and decode JWTs
app.config['SECRET_KEY'] = 'your_secret_key'

# Dummy user data
users = {
    "user1": generate_password_hash("password1"),
    "user2": generate_password_hash("password2")
}

def authenticate(username, password):
    """Authenticate user credentials."""
    if username in users and check_password_hash(users[username], password):
        return True
    return False

def create_token(username):
    """Creates a JWT token for a valid user."""
    payload = {
        'exp': datetime.datetime.utcnow() + datetime.timedelta(days=1),
        'iat': datetime.datetime.utcnow(),
        'sub': username
    }
    return jwt.encode(payload, app.config['SECRET_KEY'], algorithm='HS256')

@app.route('/login', methods=['POST'])
def login():
    """Login API endpoint."""
    data = request.json
    username = data.get('username')
    password = data.get('password')

    if not username or not password:
        return jsonify({'message': 'Username and password are required!'}), 400

    if authenticate(username, password):
        token = create_token(username)
        return jsonify({'message': 'Login successful!', 'token': token.decode('UTF-8')}), 200

    return jsonify({'message': 'Invalid username or password!'}), 401

def verify_token(token):
    """Verify the given JWT token."""
    try:
        payload = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
        return payload['sub']
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

@app.route('/protected', methods=['GET'])
def protected():
    """A protected endpoint which requires JWT."""
    token = request.headers.get('Authorization')
    if not token:
        return jsonify({'message': 'Token is missing!'}), 403

    username = verify_token(token)

    if not username:
        return jsonify({'message': 'Invalid or expired token!'}), 403

    return jsonify({'message': f'Hello, {username}! This is a protected resource.'})

if __name__ == '__main__':
    app.run(debug=True)
```

- First, this code uses Flask to set up a basic API.
- Passwords are hashed using Werkzeugâ€™s security utilities. 
- JWTs (JSON Web Tokens) are used for authentication; these are created when login credentials are valid and must be provided for accessing protected routes.
- `/login` endpoint authenticates the user and issues a JWT on success.
- `/protected` endpoint demonstrates a protected resource by requiring a valid JWT for access.
- The token is encoded with the username and an expiration time of one day.