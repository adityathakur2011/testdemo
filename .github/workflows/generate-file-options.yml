# name: Call API For Respective Selection

# on:
#   workflow_dispatch:
#     inputs:
#       endpoint:
#         description: 'Select the Knowron action to perform'
#         required: true
#         type: choice
#         options:
#           - Knowron Find Bugs
#           - Knowron Create Documentation

# jobs:
#   call-api:
#     runs-on: ubuntu-latest
#     steps:
#       - name: 🧠 Map Selection to API Endpoint
#         id: map
#         run: |
#           echo "📥 Selected Knowron Action: '${{ github.event.inputs.endpoint }}'"
          
#           if [[ "${{ github.event.inputs.endpoint }}" == "Knowron Find Bugs" ]]; then
#             echo "endpoint=users" >> $GITHUB_OUTPUT
#             echo "🔧 Mapped to endpoint: /users"
#           elif [[ "${{ github.event.inputs.endpoint }}" == "Knowron Create Documentation" ]]; then
#             echo "endpoint=posts" >> $GITHUB_OUTPUT
#             echo "📝 Mapped to endpoint: /posts"
#           else
#             echo "❌ Unknown selection!"
#             exit 1
#           fi

#       - name: 📦 Install jq for JSON formatting
#         run: |
#           sudo apt-get update && sudo apt-get install -y jq

#       - name: 🔗 Call API and Show Structured Response
#         run: |
#           URL="https://dummyjson.com/${{ steps.map.outputs.endpoint }}"
#           echo "🌐 Calling API at: $URL"

#           RESPONSE=$(curl --fail -s -X GET "$URL")
#           if [ $? -ne 0 ]; then
#             echo "❌ API call failed"
#             exit 1
#           fi
          
#           echo "✅ API Response (Structured):"
#           echo "$RESPONSE" | jq '.'







name: Call API For Respective Selection

on:
  workflow_dispatch:
    inputs:
      endpoint:
        description: 'Select the Knowron action to perform'
        required: true
        type: choice
        options:
          - Knowron Find Bugs
          - Knowron Create Documentation

jobs:
  call-api:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: 📄 Fetch and escape file content
        id: fetch_code
        run: |
          RAW_URL="https://raw.githubusercontent.com/adityathakur2011/testdemo/main/feature/SCRUM-9579"
          echo "📥 Fetching code from: $RAW_URL"

          CODE=$(curl --fail -s "$RAW_URL")
          if [ $? -ne 0 ]; then
            echo "❌ Failed to fetch file"
            exit 1
          fi

          # Escape multiline code string for JSON using jq
          ESCAPED_CODE=$(jq -n --arg code "$CODE" '$code')

          echo "escaped_code=$ESCAPED_CODE" >> $GITHUB_OUTPUT

      - name: 🧠 Build JSON Payload Safely
        id: build_payload
        run: |
          echo "🔧 Building JSON payload..."

          jq -n \
            --arg file_name "feature/SCRUM-9579" \
            --arg code ${{ steps.fetch_code.outputs.escaped_code }} \
            --arg language "python" \
            '{file_name: $file_name, code: $code, language: $language}' > payload.json

          echo "✅ Payload built:"
          cat payload.json

      - name: 🔗 Call POST API
        run: |
          echo "🌐 Calling POST API..."

          RESPONSE=$(curl --fail -s -X POST "https://crewaiagent-bqcbdqe0fkgchphb.eastus-01.azurewebsites.net/findBugVsCode" \
            -H "Content-Type: application/json" \
            -d @payload.json)

          if [ $? -ne 0 ]; then
            echo "❌ API call failed"
            exit 1
          fi

          echo "✅ API Response:"
          echo "$RESPONSE" | jq '.'
